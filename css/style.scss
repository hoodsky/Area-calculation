//TO%
@function prc($pxOne, $pxTwo) {
    $result: ($pxOne/$pxTwo)*100%;
    @return $result;
}

//REM
@function rem($px) {
    $result: ($px/16)+rem;
    @return $result;
}

//EM

@function em($px) {
    $result: ($px/16)+rem;
    @return $result;
}

// адаптивное свойство
$maxWidth: 1920 / 16; //максимальный размер экрана (px)
$maxWidthContainer: 1200 / 16; //максимальный размер контейнера (px)

@mixin adaptiv-value($property, $startSize, $minSize, $type) {
    $addSize: ($startSize / 16)- ($minSize / 16);

    @if $type==1 {
        //Только если меньше контейнера
        #{$property}: ($startSize / 16) + rem;

        @media (max-width: #{$maxWidthContainer + rem}) {
            #{$property}: calc(#{($minSize / 16) + rem} + #{$addSize} * ((100vw - 20rem) / #{$maxWidthContainer - 20}));
        }
    }

    @else if $type==2 {
        //Только если больше контейнера
        #{$property}: ($startSize / 16) + rem;

        @media (min-width: #{$maxWidthContainer + rem}) {
            #{$property}: calc(#{($minSize / 16) + rem} + #{$addSize} * ((100vw - 20rem) / #{$maxWidth - 20}));
        }
    }

    @else {
        //Всегда
        #{$property}: calc(#{($minSize /16 ) + rem} + #{$addSize} * ((100vw - 20rem) / #{$maxWidth - 20}));
    }
}

//@include adaptiv-value("значение", начальный размер, конечный размер, тип(1-меньше контейнера, 2-больше, 0-всегда))

@import url('https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@200;300;400;500;600&display=swap');

html {
    font-family: 'Source Code Pro', monospace;
}

input[type="number"] {
    -moz-appearance: textfield;
    -webkit-appearance: textfield;
    appearance: textfield;
}

h1 {
    font-size: rem(50);
}

input[type="number"]::-webkit-outer-spin-button,
input[type="number"]::-webkit-inner-spin-button {
    display: none;
}

input {
    // border-radius: rem(30);
    border: none;
    // padding: rem(5) rem(5);
    margin: rem(10) 0;
    font-family: 'Source Code Pro', monospace;
    outline: none;
    padding: 2px 10px;
    border-radius: rem(30);
    height: rem(30);
    width: 60%;
}

label {
    display: block;
    // width: 50vw;
}

input:focus {
    border: none;
}

.change-section {
    background-color: gray;
}

.tile-section {
    background-color: silver;
    padding: rem(20) rem(10);
    display: flex;
    flex-direction: column;
    align-items: center;

    // align-items: center;
    div {
        min-width: 300px;
        max-width: 500px;
    }

    .tile-dimensions {
        // flex-wrap: wrap;
        // display: flex;
        // flex-direction: column;
        // align-items: center;

        h3 {
            text-align: center;
        }


        div {
            display: flex;
            justify-content: center;
            flex-direction: row;
            // min-width: none;
            // max-width: none;
            flex-wrap: wrap;
            gap: 10px;

            label {
                // flex: 1 1 auto;
                border: 1px solid green;
                display: flex;
                align-items: center;
            }
        }
    }
}

.number-minus,
.number-plus {
    height: rem(32);
    border: none;
    width: rem(32);
    cursor: pointer;
    border-radius: 50%;
}

// .number-minus {
//     border-radius: 50% 0 0 50%;
// }

// .number-plus {
//     border-radius: 0 50% 50% 0;
// }